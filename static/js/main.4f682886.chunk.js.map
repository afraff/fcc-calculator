{"version":3,"sources":["components/Display.js","components/Button.js","App.js","serviceWorker.js","index.js"],"names":["display","props","react_default","a","createElement","id","children","Button","runParentHandleClick","_this","clickHandler","name","this","onClick","Component","App","state","currentNumber","operatorFlag","decimalFlag","evaluated","buttonName","setState","newNumber","slice","length","math","className","Display","src_components_Button","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4f682886.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst display = (props) => {\r\n    return (\r\n        <div id='display'>{props.children}</div>\r\n    );\r\n};\r\n\r\nexport default display;","import React, { Component } from 'react';\r\nimport './Button.css';\r\n\r\nclass Button extends Component {\r\n    runParentHandleClick = () => {\r\n        this.props.clickHandler(this.props.name);\r\n      }\r\n\r\n    render () {\r\n        return (\r\n            <button id={this.props.id} onClick={this.runParentHandleClick}>{this.props.name}</button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Button;","import React, { Component } from 'react';\nimport * as math from 'mathjs';\nimport './App.css';\nimport Display from './components/Display';\nimport Button from './components/Button';\n\nclass App extends Component {\n  state = {\n    currentNumber: \"0\",\n    operatorFlag: false,\n    decimalFlag: false,\n    evaluated: false\n  }\n\n\n  clickHandler = (buttonName) => {\n    let currentNumber = this.state.currentNumber\n    let operatorFlag = this.state.operatorFlag\n    switch(true){\n        case buttonName === \"0\" ||\n             buttonName === \"1\" ||\n             buttonName === \"2\" ||\n             buttonName === \"3\" ||\n             buttonName === \"4\" ||\n             buttonName === \"5\" ||\n             buttonName === \"6\" ||\n             buttonName === \"7\" ||\n             buttonName === \"8\" ||\n             buttonName === \"9\" :\n        \n        if(this.state.currentNumber!==\"0\" && !this.state.evaluated){\n          currentNumber += buttonName;\n          operatorFlag = false;\n        } else {\n          currentNumber = buttonName;\n          this.setState({ evaluated: false });\n          }        \n        break\n        case buttonName === \"+\" ||\n             buttonName === \"-\" ||\n             buttonName === \"*\" ||\n             buttonName === \"/\" :\n        if(!this.state.operatorFlag) {\n          currentNumber += buttonName;\n          operatorFlag = true;\n          this.setState({ decimalFlag:false });\n          this.setState({ evaluated: false });\n        } else{\n          const newNumber = currentNumber.slice(0, currentNumber.length-1);\n          currentNumber = newNumber;\n          currentNumber += buttonName;\n        }\n        break\n        case buttonName === \"C\":\n          currentNumber = \"0\";\n          operatorFlag = false;\n          this.setState({ decimalFlag:false });\n        break\n        case buttonName === \"=\":\n          this.setState({ evaluated: true });\n          currentNumber = math.eval(currentNumber);\n          operatorFlag = false;\n          this.setState({ decimalFlag: true });          \n        break\n        case buttonName === \".\":\n          if(!this.state.decimalFlag){\n            currentNumber += \".\";\n            this.setState({ decimalFlag:true });\n          }\n        break\n        default:\n        currentNumber += buttonName;\n        operatorFlag = false;\n    }\n    this.setState({ operatorFlag });\n    this.setState({ currentNumber });\n  } \n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"calcWrapper\">\n          <Display>{this.state.currentNumber}</Display>\n          <div className=\"row\">\n            <Button id=\"seven\" name=\"7\" clickHandler={this.clickHandler} />\n            <Button id=\"eight\" name=\"8\" clickHandler={this.clickHandler} />\n            <Button id=\"nine\" name=\"9\" clickHandler={this.clickHandler} />\n            <Button id=\"divide\" name=\"/\" clickHandler={this.clickHandler} />\n          </div>\n          <div className=\"row\">\n            <Button id=\"four\" name=\"4\" clickHandler={this.clickHandler} />\n            <Button id=\"five\" name=\"5\" clickHandler={this.clickHandler} />\n            <Button id=\"six\" name=\"6\" clickHandler={this.clickHandler} />\n            <Button id=\"multiply\" name=\"*\" clickHandler={this.clickHandler} />\n          </div>\n          <div className=\"row\">\n            <Button id=\"one\" name=\"1\" clickHandler={this.clickHandler} />\n            <Button id=\"two\" name=\"2\" clickHandler={this.clickHandler} />\n            <Button id=\"three\" name=\"3\" clickHandler={this.clickHandler} />\n            <Button id=\"add\" name=\"+\" clickHandler={this.clickHandler} />\n          </div>\n          <div className=\"row\">\n            <Button id=\"decimal\" name=\".\" clickHandler={this.clickHandler} />\n            <Button id=\"zero\" name=\"0\" clickHandler={this.clickHandler} />\n            <Button id=\"equals\" name=\"=\" clickHandler={this.clickHandler} />\n            <Button id=\"subtract\" name=\"-\" clickHandler={this.clickHandler} />\n          </div>\n          <div className=\"row\">\n            <Button id=\"clear\" name=\"C\" clickHandler={this.clickHandler} />\n          </div>              \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}